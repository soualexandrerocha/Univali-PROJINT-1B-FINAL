{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf16 #ifndef LIMPATELA_H_INCLUDED
\par \cb1\cf0\ul0\i0\b0  2  \cb3\cf16 #define LIMPATELA_H_INCLUDED
\par \cb1\cf0\ul0\i0\b0  3  
\par \cb1\cf0\ul0\i0\b0  4  \cb3\cf16 #include <iostream>
\par \cb1\cf0\ul0\i0\b0  5  \cb3\cf16 #include <windows.h>
\par \cb1\cf0\ul0\i0\b0  6  
\par \cb1\cf0\ul0\i0\b0  7  \cb3\cf14\b using namespace \b0\cb3\cf16\b std\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  8  
\par \cb1\cf0\ul0\i0\b0  9    \cb3\cf14\b void \b0\cb1\cf0 LimpaTela\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0 10      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 11    \cb1\cf0 HANDLE                     hStdOut\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 12    \cb1\cf0 CONSOLE_SCREEN_BUFFER_INFO csbi\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 13    \cb1\cf0 DWORD                      \cb3\cf16\b count\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 14    \cb1\cf0 DWORD                      cellCount\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 15    \cb1\cf0 COORD                      homeCoords \cb3\cf25 = \{ \cb3\cf12 0\cb3\cf25 , \cb3\cf12 0 \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0 16  
\par \cb1\cf0\ul0\i0\b0 17    \cb1\cf0 hStdOut \cb3\cf25 = \cb1\cf0 GetStdHandle\cb3\cf25 ( \cb1\cf0 STD_OUTPUT_HANDLE \cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 18    \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 hStdOut \cb3\cf25 == \cb1\cf0 INVALID_HANDLE_VALUE\cb3\cf25 ) \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 19  
\par \cb1\cf0\ul0\i0\b0 20    \cb3\cf4 /* Captura o número de células do buffer do console*/
\par \cb1\cf0\ul0\i0\b0 21    \cb3\cf14\b if \b0\cb3\cf25 (!\cb1\cf0 GetConsoleScreenBufferInfo\cb3\cf25 ( \cb1\cf0 hStdOut\cb3\cf25 , &\cb1\cf0 csbi \cb3\cf25 )) \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 22    \cb1\cf0 cellCount \cb3\cf25 = \cb1\cf0 csbi\cb3\cf25 .\cb1\cf0 dwSize\cb3\cf25 .\cb1\cf0 X \cb3\cf25 *\cb1\cf0 csbi\cb3\cf25 .\cb1\cf0 dwSize\cb3\cf25 .\cb1\cf0 Y\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 23  
\par \cb1\cf0\ul0\i0\b0 24    \cb3\cf4 /* Preenche todas as posições com espaços */
\par \cb1\cf0\ul0\i0\b0 25    \cb3\cf14\b if \b0\cb3\cf25 (!\cb1\cf0 FillConsoleOutputCharacter\cb3\cf25 (
\par \cb1\cf0\ul0\i0\b0 26      \cb1\cf0 hStdOut\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 27      \cb3\cf25 (\cb1\cf0 TCHAR\cb3\cf25 ) \cb3\cf22 ' '\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 28      \cb1\cf0 cellCount\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 29      \cb1\cf0 homeCoords\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 30      \cb3\cf25 &\cb3\cf16\b count
\par \cb1\cf0\ul0\i0\b0 31      \cb3\cf25 )) \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 32  
\par \cb1\cf0\ul0\i0\b0 33    \cb3\cf4 /* Preenche tudo com as cores e atributos vigentes */
\par \cb1\cf0\ul0\i0\b0 34    \cb3\cf14\b if \b0\cb3\cf25 (!\cb1\cf0 FillConsoleOutputAttribute\cb3\cf25 (
\par \cb1\cf0\ul0\i0\b0 35      \cb1\cf0 hStdOut\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 36      \cb1\cf0 csbi\cb3\cf25 .\cb1\cf0 wAttributes\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 37      \cb1\cf0 cellCount\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 38      \cb1\cf0 homeCoords\cb3\cf25 ,
\par \cb1\cf0\ul0\i0\b0 39      \cb3\cf25 &\cb3\cf16\b count
\par \cb1\cf0\ul0\i0\b0 40      \cb3\cf25 )) \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 41  
\par \cb1\cf0\ul0\i0\b0 42    \cb3\cf4 /* Leva o cursor para a posição (0,0) */
\par \cb1\cf0\ul0\i0\b0 43    \cb1\cf0 SetConsoleCursorPosition\cb3\cf25 ( \cb1\cf0 hStdOut\cb3\cf25 , \cb1\cf0 homeCoords \cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 44    \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 45  
\par \cb1\cf0\ul0\i0\b0 46  \cb3\cf16 #else
\par \cb1\cf0\ul0\i0\b0 47  
\par \cb1\cf0\ul0\i0\b0 48  \cb3\cf5 // versão para Linux
\par \cb1\cf0\ul0\i0\b0 49  
\par \cb1\cf0\ul0\i0\b0 50    \cb3\cf24 #include <unistd.h>
\par \cb1\cf0\ul0\i0\b0 51    \cb3\cf24 #include <term.h>
\par \cb1\cf0\ul0\i0\b0 52  
\par \cb1\cf0\ul0\i0\b0 53  \cb3\cf15\b void \b0\cb3\cf2 LimpaTela\cb3\cf26 ()
\par \cb1\cf0\ul0\i0\b0 54    \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 55    \cb3\cf15\b if \b0\cb3\cf26 (!\cb3\cf2 cur_term\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 56      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 57      \cb3\cf15\b int \b0\cb3\cf2 result\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 58      \cb3\cf2 setupterm\cb3\cf26 ( \cb3\cf2 NULL\cb3\cf26 , \cb3\cf2 STDOUT_FILENO\cb3\cf26 , &\cb3\cf2 result \cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 59      \cb3\cf15\b if \b0\cb3\cf26 (\cb3\cf2 result \cb3\cf26 <= \cb3\cf13 0\cb3\cf26 ) \cb3\cf15\b return\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 60      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 61  
\par \cb1\cf0\ul0\i0\b0 62    \cb3\cf2 putp\cb3\cf26 ( \cb3\cf2 tigetstr\cb3\cf26 ( \cb3\cf21 "clear" \cb3\cf26 ) );
\par \cb1\cf0\ul0\i0\b0 63    \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 64  
\par \cb1\cf0\ul0\i0\b0 65  \cb3\cf16 #endif \cb3\cf4 // LIMPATELA_H_INCLUDED
\par }